import type { DecoratorFunction } from "@storybook/csf/dist/story";
import type { Meta, ReactFramework } from "@storybook/react";
import type { ComponentType } from "react";

import type { TypedObject } from "../../types";
import type { ArgProcessor, EnhancedArgType } from "./controls";

/**
 * Defines position in story hierarchy.
 * Predefined values can be obtained from Category enum.
 */
export type CategoryPath = readonly string[];

/**
 * Named type used to mark readme file. Only for semantic purposes.
 */
export type ReadmeFile = unknown;

/**
 * Parameters for creating documentation stories in MDX format.
 */
export type CreateMdxMetaParams = Readonly<{
    /** Category of story, determines position in story hierarchy. Predefined values can be obtained from Category enum. */
    categoryPath: CategoryPath;
    /** Name of story displayed in sidebar. */
    name: string;
    /** Flag which marks story as primary within its category. Primary stories are sorted before non-primary. Default value is false. */
    primary?: boolean;
}>;

/**
 * Parameters of helper function for creation of object with meta data about component story for default export.
 *
 * @template A Type of component args/props for which story is created.
 */
export type ComponentExportParams<A> = Readonly<{
    /**
     * Id is used to achieve stable url for story. Url is otherwise created from title, which can change when story is renamed or moved into different category.
     * So it is better to use id when we need to link story.
     */
    id?: string;
    /** Name of story. It is extracted form component if not specified explicitly. */
    name?: string;
    /**
     * Category of story, determines position in story hierarchy. Predefined values can be obtained from Category enum. If component story consist of more than one individual story then
     * category for component is not specified here. It is automatically derived from component.
     */
    categoryPath: CategoryPath;
    /** Component of story. It serves as source for automaci generation of controls and props table in docs. */
    component: ComponentType<A>;
    /**
     * Array of decorators which is applied to every story of this component.
     * @see https://storybook.js.org/docs/react/writing-stories/decorators
     */
    decorators?: Meta<A>["decorators"];
    /**
     * Initial values for args. Initial values can also be set by using argTypes and specify value there. Args are merged with values derived from argTypes and args have higher priority.
     */
    args?: Partial<A> & Record<string, unknown>;
    /**
     * Definition of argTypes. Typing contains component props to achieve better autocomplete in editor. Typing also allows other argTypes than component props.
     * @see https://storybook.js.org/docs/react/api/argtypes
     * @see createArgType
     * @see DISABLED_ARG_TYPE
     * @see HIDDEN_ARG_TYPE
     * @see createDateArgType
     * @see createEnumArgType
     * @see createOptionalEnumArgType
     * @see createOptionSelectArgType
     * @see createOptionalOptionSelectArgType
     * @see createMappedSelectArgType
     * @see createOptionalBooleanArgType
     * @see createOptionalTextArgType
     * @see createTextSelectArgs
     * @see createActionArgType
     * @see createExtendedActionArgType
     * @see createStoreArgType
     */
    argTypes?: Partial<Record<keyof A, EnhancedArgType>> & TypedObject<EnhancedArgType>;
    /**
     * Setting parametrs allows addition or override of parameters generated by this helper function.
     * @see https://storybook.js.org/docs/react/writing-stories/parameters
     */
    parameters?: Meta["parameters"];
    /** Flag for enabling Actions tab in story sidebar. Default value is false = hidden. */
    enableActionsTab?: boolean;
    /** Readme file with component documentation in MDX format. Content of this file is displayed in Docs tab. */
    readme?: ReadmeFile;
}>;

/**
 * Return value of createComponentExport.
 * @see createComponentExport
 */
export type ComponentExportInfo<A> = Readonly<{
    /**
     * Object with story meta data for default export.
     * @see https://storybook.js.org/docs/react/api/csf#default-export
     */
    defaultExport: ExtendedMeta<A>;
    /**
     * Arg processor derived from argTypes.
     * Intended for use in createStoryExport.
     * @see createStoryExport
     */
    argProcessor: ArgProcessor;
}>;

/**
 * Extends type {@link Meta} from storybook with id attribute.Storybook supports id, but unfortunately it is not present in current storybook typings.
 * This type should be removed if storybook updates its typings to contain id.
 *
 * @see https://storybook.js.org/docs/react/configure/sidebar-and-urls#permalinking-to-stories
 */
export type ExtendedMeta<A> = Meta<A> & {
    /**
     * Id is used to achieve stable url for story. Url is otherwise created from title, which can change when story is renamed or moved into different category.
     * So it is better to use id when we need to link story.
     */
    readonly id?: string;
};

/**
 * Available options for helper function which creates export for one story.
 */
export type StoryExportParams = Readonly<{
    /**
     * Processor for args transformation before they are passed to component as props.
     */
    argProcessor?: ArgProcessor;
}>;

/**
 * Available options for helper function which creates component with single story.
 * @template A Type of args.
 */
export type SingleStoryParams<A> = ComponentExportParams<A>;

/**
 * Contains data needed for story sorting.
 */
export type StorySortParams = {
    categoryPath: CategoryPath;
    primary?: true;
    name: string;
};

/**
 * DecoratorFn type from "@storybook/react" does not allow passing generic arg type. This cause
 * use of default Args type, which is not compatible with ComponentExportParams<A> decorators prop.
 * This problem does not occur for components with empty or optional props.
 *
 * This type is created from inner types used to create DecoratorFn, but allows passing of arg type.
 */
export type GenericDecoratorFn<A> = DecoratorFunction<ReactFramework, A>;
